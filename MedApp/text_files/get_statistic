import os

import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from tensorflow import keras


model = keras.models.load_model(os.getcwd() + "/KerasModel", custom_objects=None,
                                compile=True,
                                options=None)


train_generator = ImageDataGenerator(rescale=1. / 255).flow_from_directory(
    directory='D:/Desktop/Диплом/ComplexDiplomaProject/dataset/train',
    target_size=(224, 224),
    color_mode="grayscale",
    batch_size=32,
    class_mode="categorical",
    shuffle=True, seed=42)

test_generator = ImageDataGenerator(rescale=1. / 255).flow_from_directory(
    directory='D:/Desktop/Диплом/ComplexDiplomaProject/dataset/test_1000',
    target_size=(224, 224),
    color_mode="grayscale",
    batch_size=1,
    class_mode=None,
    shuffle=False,
    seed=42)

class Neural_Network():
    @staticmethod
    def get_statistic():  # result = 79,8%
        STEP_SIZE_TEST = test_generator.n // test_generator.batch_size
        test_generator.reset()
        pred = model.predict(test_generator,
                             steps=STEP_SIZE_TEST,
                             verbose=1)

        predicted_class_indices = np.argmax(pred, axis=1)

        labels = (train_generator.class_indices)
        labels = dict((v, k) for k, v in labels.items())
        predictions = [labels[k] for k in predicted_class_indices]

        current_idx = 0
        count_accurate = 0
        Actual = []
        for i in predictions:
            string = test_generator.filenames[current_idx]
            substr = '\\'
            actual = string[:string.find(substr)]
            Actual.append(actual)
            pred = predictions[current_idx]
            if actual == pred:
                count_accurate += 1
            current_idx += 1
        acc = count_accurate / STEP_SIZE_TEST
        print(f"Точность предсказания тестовых изображений: {round(acc * 100, 2)}%.")

if __name__ == '__main__':
    Neural_Network.get_statistic()
# labels = (train_generator.class_indices)   # если надо пользовательские компоненты (если видов изо больше/меньше 4)